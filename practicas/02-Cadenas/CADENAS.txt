cadenas:

///////////////////////////////
-definir 
//////////////////////////////

El ultimo lugar va estar ocupado por el caracter "\0" que simboliza el fin de la cadena. Si voy a ingresar un texto de 10 letras tengo que declarar una cadena de tamaño 11, ya que el ultimo lugar guardara el simbolo "\0" de finalizacion.

----------------------------
char mi_cadena[11];

o

char mi_cadena[11] = {'H','o','l','a','','m','u','n','d','o'};

o

char mi_cadena[11] = "Hola mundo"

o

Y con esta ultima puedo guardar lugar para agregarle mas letras a la cadena:
char mi_cadena[11] = "Hola"
----------------------------
inicializacion forzosa (no declaro el tamaño del array, lo declaro agregandole contenido cuando lo inicio)

char mi_cadena[] = "Hola mundo";

o

char mi cadena[] = {'H','o','l','a','','m','u','n','d','o'}

----------------------------
#define TAM 11
o
const int TAM = 11;

char mi_cadena[TAM];
----------------------------

//////////////////////////////////////
-cargar datos:
/////////////////////////////////////

Con un ciclo puedo ingresar caracter por caracter (no tiene mucho sentido) Pero es poco practico.

i=0;

while (i<(TAM-1))
{

	Printf("Ingrese una letra de su cadena:\n");
	scanf("%c",&mi_cadena[i]);
	fflush(stdin);

	i++;

}

********************************************
Por eso usamos lo siguiente
********************************************


Usando scanf:
+++++++++++++++++++++++++++++++++++++++++++++

Printf("Ingrese una cadena\n");
scanf("%[^\n]",mi_cadena);

printf("Mi cadena es %s\n",mi_cadena);


*notese que mi_cadena va sin el & ya que es un array.
---------------------------------------------

Usando "gets"
++++++++++++++++++++++++++++++++++++++++++++++
Printf("Ingrese una cadena\n");
gets(mi_cadena);

printf("Mi cadena es %s\n",mi_cadena);

++++++++++++++++++++++++++++++++++++++++++++++

NOTA:

Si usamos scanf y ponemos ""scanf("%s",mi_cadena)"" vamos a tener un problema. En este caso C solo tomara datos hasta que recibe un espacio, entonces si queremos meter un texto o frase que contenga espacio solo imprimira la primera palabra, Ej:

>>scanf("%s",mi_cadena)
>>"HOLA MUNDO COMO ESTAS!!!

>>PRINT

<<printf("Mi cadena es %s\n",mi_cadena);
<<HOLA

Por eso hay que tener cuidado al ingresar texto.
Para evitar esto es preferible usar:

"scanf("%[^\n]",mi_cadena)"

"gets(mi_cadena)"

+++++++++++++++++++++++++++++++++++++++++++++++++

Para emitir usamos:

printf("Mi cadena es %s\n",mi_cadena);


pero tambien puedo emitirlo letra por letra, esto puede servir para analizar o tocar la cadena letra por letra, usando un ciclo:

i=0;

While (mi cadena[i]!='\0')
{

	printf("%c",mi_cadena[i]);
	i++;

}

i=0;

While (mi cadena[i]!='\0')
{

	if((mi_cadena[i]=='a'))
	{
		mi_cadena[i]='x';
	}

	i++;

}

/////////////////////////////////////////////////
Librerias para trabajar con cadenas y caracteres:
/////////////////////////////////////////////////


**************************
Para trabajar con caracteres:

ctype.h
**************************

En algunos, la devolucion que hace el llamado puede ser VERDADERO=(sera un entero !=0 -distinto de cero-), o FALSO = 0

-isalnum(caracter): Si "caracter" es una letra o digito devuelve VERDADERO. Caso contrario es FALSO.

-isalpha(caracter): Devuleve VERDADERO si caracter es una letra y FALSO en caso contrario.

-isblank(caracter): devuelve VERDADERO si caracter es un espacio en blanco o un tabulador.

-isdigit(caracter): devuelve VERDADERO si caracter es un digito, y FALSO en caso contrario

-isspace(caracter): devuelve VERDADERO si caracter es un espacio en blanco, un salto de línea, un
retorno de carro, un tabulador, etc., y FALSO en caso contrario.

-islower(caracter): devuelve VERDADERO si caracter es una letra minúscula, y FALSO en caso contrario.

-isupper(caracter): devuelve VERDADERO si caracter es una letra mayúscula, y FALSO en caso contrario.


En estos otros dos caso, devuelve el caracter convertido si los hay:

-toupper(caracter): devuelve la mayúscula asociada a caracter, si la tiene; si no, devuelve el mismo
caracter.

-tolower(caracter): devuelve la minúscula asociada a caracter, si la tiene; si no, devuelve el mismo
caracte

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

**************************
Para trabajar con string (cadenas):

string.h
**************************

-------------------------------------------
strcmp  (comparar el tamaño de dos cadenas)
-------------------------------------------
comparar dos cadenas y ver cual tiene mayor tamaño (mas caracteres)

valor = strcmp( cad_1, cad_2 );

Comparo el primero con el segundo:

Si son:

IGUALES = 0
La primera es mas chica = -1
Las primera es mas grande = +1
(es como que comparo  cad_1>cad_2  si es VERDADERO=+1, si es FALSO=-1, si son iguales=0)


++++++++++++++++++++++++++++++++++++++
tambien se puede hacer por punteros:

int strcmp(const char *s1, const char *s2);

Compara la cadena apuntada por s1 con la cadena apuntada por s2.

La función retorna un número entero mayor, igual, o menor que cero, según si la cadena apuntada por s1 es mayor, igual, o menor que la cadena apuntada por s2

++++++++++++++++++++++++++++++++++++


------------------------------------------------------------------------
strcpy (copio una cadena a otra cadena, tiene que tener el mismo tamaño)
------------------------------------------------------------------------

strcpy( cad_2, cad_1 )

++++++++++++++++++++++++++++++++++++++
tambien se puede hacer por punteros:
++++++++++++++++++++++++++++++++++++++
char *strcpy(char *s1, const char *s2);

Copia la cadena apuntada por s2 (incluyendo el carácter nulo) a la cadena apuntada por s1.

La función retorna el valor de s1. 
++++++++++++++++++++++++++++++++++++

-------------------------------------------------------------------------
strlen (Para saber el tamaño de la cadena)
-------------------------------------------------------------------------

strlen(cad_1);


--------------------------------------------------------------------------
strcat (Para concatenar cadenas)
--------------------------------------------------------------------------

strcat( cad_1, cad_2 );

++++++++++++++++++++++++++++++++++++++
tambien se puede hacer por punteros:
++++++++++++++++++++++++++++++++++++++

char *strcat(char*s1, const char *s2); 

Agrega una copia de la cadena apuntada por s2 (incluyendo el carácter nulo) al final de la cadena apuntada por s1. El carácter inicial de s2 sobrescribe el carácter nulo al final de s1 

La función retorna el valor de s1. 

++++++++++++++++++++++++++++++++++++++

--------------------------------------------------------------------------
size_t strlen (Calcula el número de caracteres de la cadena)
--------------------------------------------------------------------------

size_t strlen(cad_1)

++++++++++++++++++++++++++++++++++++++
tambien se puede hacer por punteros:
++++++++++++++++++++++++++++++++++++++

size_t strlen(const char *s); 

Calcula el número de caracteres de la cadena apuntada por s.

La función retorna el número de caracteres hasta el carácter nulo, que no se incluye.


Comparar el contenido de dos cadenas:
*************************************

Son iguales = 0
Son distintas = otro

strcmp(pal1,pal2) == 0
